#include "ros/ros.h"
#include "sensor_msgs/LaserScan.h"
#include "geometry_msgs/Twist.h"
//----include laser
//----include twist

//----left callback
void callback_llaser(const sensor_msgs::LaserScan::ConstPtr& msg);
//----right callback
void callback_rlaser(const sensor_msgs::LaserScan::ConstPtr& msg);

bool path_blocked = false;

int main(int argc, char** argv) {
    ros::init(argc, argv, "ex2_topics");
    ROS_INFO("Starting ex2_topics node...");
    ros::NodeHandle nh;
    ros::Rate loop_rate(10);

    //----subscriber
    ros::Subscriber sub_llaser =
	   nh.subscribe("/iRobot_0/left_front_scan", 1, callback_llaser);
    //----subscriber
    ros::Subscriber sub_rlaser=
	   nh.subscribe("/iRobot_0/right_front_scan", 1, callback_rlaser);
    //----publisher
    ros::Publisher pub_vel = 
	   nh.advertise<geometry_msgs::Twist>("/iRobot_0/cmd_vel", 1);

    while(ros::ok()) {
	geometry_msgs::Twist msg_move;
	ros::spinOnce();
	loop_rate.sleep();
        if (path_blocked) {
            //----
	    msg_move.angular.z = 90;
        }
        else {
            //----
	    msg_move.angular.z = 0;
        }
	pub_vel.publish(msg_move);
        ros::spinOnce();
        loop_rate.sleep();
    }
    return 0;
}

void callback_llaser(const sensor_msgs::LaserScan::ConstPtr& msg) {
    //----
    for(int i = 0; i < msg->ranges.size(); i++) {
	if(msg->ranges[i] < 1.0) {
	   path_blocked = true;
	}
    }
}

void callback_rlaser(const sensor_msgs::LaserScan::ConstPtr& msg) {
    //----
    for(int i = 0; i < msg->ranges.size(); i++) {
	if(msg->ranges[i] < 1.0) {
	   path_blocked = true;
	}
    }
}
